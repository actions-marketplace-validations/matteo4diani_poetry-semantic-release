name: 'poetry-semantic-release'
description: 'Release to GitHub and PyPI with poetry and python-semantic-release'
branding:
  icon: 'box'
  color: 'purple'
inputs:
  github-token:
    description: 'GitHub Token'
    required: true
    default: 'token'
  pypi-token:
    description: 'PyPI Token'
    required: true
    default: 'token'
  main-branch:
    description: 'Main branch name'
    required: false
    default: 'main'
  python-version:
    description: 'Python version'
    required: false
    default: 3.8

outputs:
  released:
    description: "True if a new release should happen"
    value: ${{ steps.release-status.outputs.released }}
  tag:
    description: "The current tag to release"
    value: ${{ steps.release-status.outputs.tag }}
  version:
    description: "The current version to release"
    value: ${{ steps.release-status.outputs.version }}

runs:
  using: "composite"

  steps:
    - uses: actions/setup-python@v3
      with:
        python-version: ${{ inputs.python-version }}

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check release status
      id: release-status
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        pip install python-semantic-release
        if semantic-release --noop --strict version
        then
          echo "Releasing new version."
        else
          echo "Skipping release steps."
        fi

    - if: steps.release-status.outputs.released == 'true'
      name: Release to GitHub
      id: github-release
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        git fetch
        git rebase origin/main
        semantic-release version
        git fetch --tags
        for file in ./dist/**
          do gh release upload "${{ steps.release-status.outputs.tag }}" $file
        done

    - if: steps.release-status.outputs.released == 'true'
      name: Release to PyPI
      id: pypi-release
      shell: bash
      env:
        PYPI_TOKEN: ${{ inputs.pypi-token }}
      run: |
        poetry config pypi-token.pypi $PYPI_TOKEN
        poetry publish